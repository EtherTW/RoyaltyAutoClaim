/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../common";
import type {
  RoyaltyAutoClaimProxy,
  RoyaltyAutoClaimProxyInterface,
} from "../RoyaltyAutoClaimProxy";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_implementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: [],
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052604051610489380380610489833981016040819052610022916102e8565b818161002e82826100e4565b50505f826001600160a01b03168260405161004991906103b7565b5f60405180830381855af49150503d805f8114610081576040519150601f19603f3d011682016040523d82523d5f602084013e610086565b606091505b50509050806100dc5760405162461bcd60e51b815260206004820152601560248201527f496e697469616c697a6174696f6e206661696c6564000000000000000000000060448201526064015b60405180910390fd5b5050506103cd565b6100ed82610142565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a28051156101365761013182826101b8565b505050565b61013e61022b565b5050565b806001600160a01b03163b5f0361017757604051634c9c8ce360e01b81526001600160a01b03821660048201526024016100d3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f5f846001600160a01b0316846040516101d491906103b7565b5f60405180830381855af49150503d805f811461020c576040519150601f19603f3d011682016040523d82523d5f602084013e610211565b606091505b50909250905061022285838361024c565b95945050505050565b341561024a5760405163b398979f60e01b815260040160405180910390fd5b565b6060826102615761025c826102ab565b6102a4565b815115801561027857506001600160a01b0384163b155b156102a157604051639996b31560e01b81526001600160a01b03851660048201526024016100d3565b50805b9392505050565b8051156102bb5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b5f5f604083850312156102f9575f5ffd5b82516001600160a01b038116811461030f575f5ffd5b60208401519092506001600160401b0381111561032a575f5ffd5b8301601f8101851361033a575f5ffd5b80516001600160401b03811115610353576103536102d4565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610381576103816102d4565b604052818152828201602001871015610398575f5ffd5b8160208401602083015e5f602083830101528093505050509250929050565b5f82518060208501845e5f920191825250919050565b60b0806103d95f395ff3fe6080604052600a600c565b005b60186014601a565b605d565b565b5f60587f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b365f5f375f5f365f845af43d5f5f3e8080156076573d5ff35b3d5ffdfea2646970667358221220396917c78598333b3ecf76e1cdc1bbd443aeb7b9815d773b02f19873d989399464736f6c634300081c0033";

type RoyaltyAutoClaimProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoyaltyAutoClaimProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RoyaltyAutoClaimProxy__factory extends ContractFactory {
  constructor(...args: RoyaltyAutoClaimProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _implementation: AddressLike,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_implementation, _data, overrides || {});
  }
  override deploy(
    _implementation: AddressLike,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_implementation, _data, overrides || {}) as Promise<
      RoyaltyAutoClaimProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): RoyaltyAutoClaimProxy__factory {
    return super.connect(runner) as RoyaltyAutoClaimProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltyAutoClaimProxyInterface {
    return new Interface(_abi) as RoyaltyAutoClaimProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RoyaltyAutoClaimProxy {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as RoyaltyAutoClaimProxy;
  }
}
