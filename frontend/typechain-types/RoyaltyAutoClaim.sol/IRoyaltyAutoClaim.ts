/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IRoyaltyAutoClaim {
  export type SubmissionStruct = {
    royaltyRecipient: AddressLike;
    totalRoyaltyLevel: BigNumberish;
    status: BigNumberish;
    reviewCount: BigNumberish;
  };

  export type SubmissionStructOutput = [
    royaltyRecipient: string,
    totalRoyaltyLevel: bigint,
    status: bigint,
    reviewCount: bigint
  ] & {
    royaltyRecipient: string;
    totalRoyaltyLevel: bigint;
    status: bigint;
    reviewCount: bigint;
  };
}

export interface IRoyaltyAutoClaimInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "changeAdmin"
      | "changeRoyaltyToken"
      | "claimRoyalty"
      | "emergencyWithdraw"
      | "entryPoint"
      | "getRoyalty"
      | "hasReviewed"
      | "isReviewer"
      | "isSubmissionClaimable"
      | "registerSubmission"
      | "reviewSubmission"
      | "revokeSubmission"
      | "submissions"
      | "token"
      | "transferOwnership"
      | "updateReviewers"
      | "updateRoyaltyRecipient"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "EmergencyWithdraw"
      | "ReviewerStatusUpdated"
      | "RoyaltyClaimed"
      | "RoyaltyTokenChanged"
      | "SubmissionRegistered"
      | "SubmissionReviewed"
      | "SubmissionRevoked"
      | "SubmissionRoyaltyRecipientUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyaltyToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoyalty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRoyalty", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasReviewed",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReviewer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubmissionClaimable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSubmission",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewSubmission",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSubmission",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "submissions", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReviewers",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoyaltyRecipient",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyaltyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasReviewed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReviewer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSubmissionClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReviewers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoyaltyRecipient",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewerStatusUpdatedEvent {
  export type InputTuple = [reviewer: AddressLike, status: boolean];
  export type OutputTuple = [reviewer: string, status: boolean];
  export interface OutputObject {
    reviewer: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyClaimedEvent {
  export type InputTuple = [
    title: string,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [title: string, recipient: string, amount: bigint];
  export interface OutputObject {
    title: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyTokenChangedEvent {
  export type InputTuple = [oldToken: AddressLike, newToken: AddressLike];
  export type OutputTuple = [oldToken: string, newToken: string];
  export interface OutputObject {
    oldToken: string;
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionRegisteredEvent {
  export type InputTuple = [title: string, royaltyRecipient: AddressLike];
  export type OutputTuple = [title: string, royaltyRecipient: string];
  export interface OutputObject {
    title: string;
    royaltyRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionReviewedEvent {
  export type InputTuple = [
    title: string,
    reviewer: AddressLike,
    royaltyLevel: BigNumberish
  ];
  export type OutputTuple = [
    title: string,
    reviewer: string,
    royaltyLevel: bigint
  ];
  export interface OutputObject {
    title: string;
    reviewer: string;
    royaltyLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionRevokedEvent {
  export type InputTuple = [title: string];
  export type OutputTuple = [title: string];
  export interface OutputObject {
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionRoyaltyRecipientUpdatedEvent {
  export type InputTuple = [
    title: string,
    oldRecipient: AddressLike,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [
    title: string,
    oldRecipient: string,
    newRecipient: string
  ];
  export interface OutputObject {
    title: string;
    oldRecipient: string;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRoyaltyAutoClaim extends BaseContract {
  connect(runner?: ContractRunner | null): IRoyaltyAutoClaim;
  waitForDeployment(): Promise<this>;

  interface: IRoyaltyAutoClaimInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  changeAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  changeRoyaltyToken: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  claimRoyalty: TypedContractMethod<[title: string], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  entryPoint: TypedContractMethod<[], [string], "view">;

  getRoyalty: TypedContractMethod<[title: string], [bigint], "view">;

  hasReviewed: TypedContractMethod<
    [title: string, reviewer: AddressLike],
    [boolean],
    "view"
  >;

  isReviewer: TypedContractMethod<[reviewer: AddressLike], [boolean], "view">;

  isSubmissionClaimable: TypedContractMethod<
    [title: string],
    [boolean],
    "view"
  >;

  registerSubmission: TypedContractMethod<
    [title: string, royaltyRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  reviewSubmission: TypedContractMethod<
    [title: string, royaltyLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeSubmission: TypedContractMethod<[title: string], [void], "nonpayable">;

  submissions: TypedContractMethod<
    [title: string],
    [IRoyaltyAutoClaim.SubmissionStructOutput],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateReviewers: TypedContractMethod<
    [_reviewers: AddressLike[], _status: boolean[]],
    [void],
    "nonpayable"
  >;

  updateRoyaltyRecipient: TypedContractMethod<
    [title: string, newRoyaltyRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeRoyaltyToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRoyalty"
  ): TypedContractMethod<[title: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoyalty"
  ): TypedContractMethod<[title: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasReviewed"
  ): TypedContractMethod<
    [title: string, reviewer: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isReviewer"
  ): TypedContractMethod<[reviewer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSubmissionClaimable"
  ): TypedContractMethod<[title: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerSubmission"
  ): TypedContractMethod<
    [title: string, royaltyRecipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reviewSubmission"
  ): TypedContractMethod<
    [title: string, royaltyLevel: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeSubmission"
  ): TypedContractMethod<[title: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [title: string],
    [IRoyaltyAutoClaim.SubmissionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReviewers"
  ): TypedContractMethod<
    [_reviewers: AddressLike[], _status: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRoyaltyRecipient"
  ): TypedContractMethod<
    [title: string, newRoyaltyRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "ReviewerStatusUpdated"
  ): TypedContractEvent<
    ReviewerStatusUpdatedEvent.InputTuple,
    ReviewerStatusUpdatedEvent.OutputTuple,
    ReviewerStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyClaimed"
  ): TypedContractEvent<
    RoyaltyClaimedEvent.InputTuple,
    RoyaltyClaimedEvent.OutputTuple,
    RoyaltyClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyTokenChanged"
  ): TypedContractEvent<
    RoyaltyTokenChangedEvent.InputTuple,
    RoyaltyTokenChangedEvent.OutputTuple,
    RoyaltyTokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "SubmissionRegistered"
  ): TypedContractEvent<
    SubmissionRegisteredEvent.InputTuple,
    SubmissionRegisteredEvent.OutputTuple,
    SubmissionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "SubmissionReviewed"
  ): TypedContractEvent<
    SubmissionReviewedEvent.InputTuple,
    SubmissionReviewedEvent.OutputTuple,
    SubmissionReviewedEvent.OutputObject
  >;
  getEvent(
    key: "SubmissionRevoked"
  ): TypedContractEvent<
    SubmissionRevokedEvent.InputTuple,
    SubmissionRevokedEvent.OutputTuple,
    SubmissionRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SubmissionRoyaltyRecipientUpdated"
  ): TypedContractEvent<
    SubmissionRoyaltyRecipientUpdatedEvent.InputTuple,
    SubmissionRoyaltyRecipientUpdatedEvent.OutputTuple,
    SubmissionRoyaltyRecipientUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "EmergencyWithdraw(address,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "ReviewerStatusUpdated(address,bool)": TypedContractEvent<
      ReviewerStatusUpdatedEvent.InputTuple,
      ReviewerStatusUpdatedEvent.OutputTuple,
      ReviewerStatusUpdatedEvent.OutputObject
    >;
    ReviewerStatusUpdated: TypedContractEvent<
      ReviewerStatusUpdatedEvent.InputTuple,
      ReviewerStatusUpdatedEvent.OutputTuple,
      ReviewerStatusUpdatedEvent.OutputObject
    >;

    "RoyaltyClaimed(string,address,uint256)": TypedContractEvent<
      RoyaltyClaimedEvent.InputTuple,
      RoyaltyClaimedEvent.OutputTuple,
      RoyaltyClaimedEvent.OutputObject
    >;
    RoyaltyClaimed: TypedContractEvent<
      RoyaltyClaimedEvent.InputTuple,
      RoyaltyClaimedEvent.OutputTuple,
      RoyaltyClaimedEvent.OutputObject
    >;

    "RoyaltyTokenChanged(address,address)": TypedContractEvent<
      RoyaltyTokenChangedEvent.InputTuple,
      RoyaltyTokenChangedEvent.OutputTuple,
      RoyaltyTokenChangedEvent.OutputObject
    >;
    RoyaltyTokenChanged: TypedContractEvent<
      RoyaltyTokenChangedEvent.InputTuple,
      RoyaltyTokenChangedEvent.OutputTuple,
      RoyaltyTokenChangedEvent.OutputObject
    >;

    "SubmissionRegistered(string,address)": TypedContractEvent<
      SubmissionRegisteredEvent.InputTuple,
      SubmissionRegisteredEvent.OutputTuple,
      SubmissionRegisteredEvent.OutputObject
    >;
    SubmissionRegistered: TypedContractEvent<
      SubmissionRegisteredEvent.InputTuple,
      SubmissionRegisteredEvent.OutputTuple,
      SubmissionRegisteredEvent.OutputObject
    >;

    "SubmissionReviewed(string,address,uint16)": TypedContractEvent<
      SubmissionReviewedEvent.InputTuple,
      SubmissionReviewedEvent.OutputTuple,
      SubmissionReviewedEvent.OutputObject
    >;
    SubmissionReviewed: TypedContractEvent<
      SubmissionReviewedEvent.InputTuple,
      SubmissionReviewedEvent.OutputTuple,
      SubmissionReviewedEvent.OutputObject
    >;

    "SubmissionRevoked(string)": TypedContractEvent<
      SubmissionRevokedEvent.InputTuple,
      SubmissionRevokedEvent.OutputTuple,
      SubmissionRevokedEvent.OutputObject
    >;
    SubmissionRevoked: TypedContractEvent<
      SubmissionRevokedEvent.InputTuple,
      SubmissionRevokedEvent.OutputTuple,
      SubmissionRevokedEvent.OutputObject
    >;

    "SubmissionRoyaltyRecipientUpdated(string,address,address)": TypedContractEvent<
      SubmissionRoyaltyRecipientUpdatedEvent.InputTuple,
      SubmissionRoyaltyRecipientUpdatedEvent.OutputTuple,
      SubmissionRoyaltyRecipientUpdatedEvent.OutputObject
    >;
    SubmissionRoyaltyRecipientUpdated: TypedContractEvent<
      SubmissionRoyaltyRecipientUpdatedEvent.InputTuple,
      SubmissionRoyaltyRecipientUpdatedEvent.OutputTuple,
      SubmissionRoyaltyRecipientUpdatedEvent.OutputObject
    >;
  };
}
